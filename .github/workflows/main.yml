name: Fiddler Build & Release Pipeline

on:
  push:
    tags:
      - v*
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  build-and-package:
    name: Build, Patch and Package
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      # 1. 准备环境
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      # 2. 下载并修改Fiddler
      - name: Download and patch Fiddler
        run: |
          # 下载官方安装包
          wget -q --show-progress https://downloads.getfiddler.com/mac-arm64/Fiddler%20Everywhere%206.0.0.dmg -O fiddler.dmg
          
          # 挂载DMG文件
          hdiutil attach fiddler.dmg -mountpoint "/Volumes/fiddler" -nobrowse
          mkdir -p patched-app
          cp -R "/Volumes/fiddler/Fiddler Everywhere.app" patched-app/
          hdiutil detach "/Volumes/fiddler"

          # 应用补丁
          cd "patched-app/Fiddler Everywhere.app/Contents/Frameworks"
          rm -f libfiddler.dylib
          wget -q --show-progress https://github.com/project-yui/Yui-patch/releases/download/v1.1.3/yui-fiddler-mac-arm64-v1.1.3.dylib -O libfiddler.dylib
          chmod +x libfiddler.dylib

          # 修改主程序
          cd ..
          mv Resources/app/out/main.js Resources/app/out/main.original.js
          cat ../../../server/index.js > Resources/app/out/main.js
          cat Resources/app/out/main.original.js >> Resources/app/out/main.js
          cp -R ../../../server/file Resources/app/out

      # 3. 创建ZIP包
      - name: Create compressed package
        run: |
          cd patched-app
          zip -r ../fiddler-patched.zip "Fiddler Everywhere.app"
          cd ..
          
          # 计算文件哈希和大小
          echo "PACKAGE_NAME=fiddler-patched-$(date +%Y%m%d).zip" >> $GITHUB_ENV
          echo "SHA256=$(shasum -a 256 fiddler-patched.zip | cut -d ' ' -f1)" >> $GITHUB_ENV
          echo "SIZE=$(du -h fiddler-patched.zip | cut -f1)" >> $GITHUB_ENV
          
          # 重命名文件包含日期
          mv fiddler-patched.zip ${{ env.PACKAGE_NAME }}

      # 4. 上传产物
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_NAME }}
          retention-days: 7

      # 5. 创建Release (仅tag触发时)
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.PACKAGE_NAME }}
          tag_name: ${{ github.ref }}
          name: "Fiddler Patched ${{ github.ref_name }}"
          body: |
            ### 🚀 破解版 Fiddler Everywhere
            
            **版本信息**  
            - 基础版本: 6.0.0  
            - 补丁版本: v1.1.3  
            - 发布日期: $(date +'%Y-%m-%d')  
            
            **文件信息**  
            - 文件名: ${{ env.PACKAGE_NAME }}  
            - 大小: ${{ env.SIZE }}  
            - SHA256: `${{ env.SHA256 }}`  
            
            **免责声明**  
            > 本版本仅供学习测试使用，请于下载后24小时内删除。  
            > 官方正版请访问: [Telerik Fiddler](https://www.telerik.com/fiddler)
          draft: false
          prerelease: false

      # 6. 输出下载信息
      - name: Output download info
        run: |
          echo "=== 下载信息 ==="
          echo "临时下载 (7天内有效):"
          echo "https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            echo "永久下载链接:"
            echo "https://github.com/$GITHUB_REPOSITORY/releases/download/${GITHUB_REF#refs/tags/}/${{ env.PACKAGE_NAME }}"
          fi
